// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  password      String          @db.VarChar(255)
  isAdmin       Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  sessions      LearnSession[]
  learningItems LearningItem[]
  notes         Note[]
}

model Article {
  id          String        @id @default(uuid())
  title       String
  source      String        // URL or DOI of the source
  type        SourceType
  mainPoints  Json[]        // Array of main points from the article
  summary     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sessions    LearnSession[]
}

model LearnSession {
  id        String   @id @default(uuid())
  userId    String
  articleId String
  progress  Float    @default(0) // Progress percentage
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])
}

model LearningItem {
  id           String   @id @default(uuid())
  userId       String
  content      String   // The piece of information to remember
  lastReviewed DateTime @default(now())
  nextReview   DateTime
  level        Int      @default(0) // Spaced repetition level
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Note {
  id                String    @id @default(uuid())
  userId            String
  title             String
  content           String    @db.Text // Rich text content
  summary           String?   @db.Text // AI-generated summary
  isAIGenerated     Boolean   @default(false) // Was this created by AI or user
  lastUpdated       DateTime  @updatedAt
  isRecentlyUpdated Boolean   @default(false) // For showing "new" badge
  tags              String[]  // Array of tags for organization
  relatedQuery      String?   // Original query that created this note
  relatedSources    Json?     // Academic sources that informed this note
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])
}

enum SourceType {
  RESEARCH_PAPER
  PATENT
  SCIENTIFIC_ARTICLE
  TECHNICAL_REPORT
} 